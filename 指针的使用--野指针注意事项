int main()
{
	/*printf("%d\n", sizeof(char*));
	printf("%d\n", sizeof(short*));
	printf("%d\n", sizeof(int*));
	printf("%d\n", sizeof(double*));*/
	int a = 0x11223344;
	int* pa = &a;
	*pa = 0;//指针类型在指针进行解引用操作时，类型决定了访问空间的大小
	printf("%p\n", pa); //000000B9682FFAD4
	printf("%p\n", pa+1);// 000000B9682FFAD8
	//int类型决定了指针加1的大小是4字节，一个整型
	//指针类型决定了指针走一步走多远（指针的步长），单位是字节
	/*int* p + 1 -> 4;
	char* p + 1 -> 1;
	double* p + -> 8;*/
	int arr[10] = { 0 };
	int* p = arr;//数组名，首元素地址；
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		*(p + i) = 1;
	}
	//---野指针
	int b;//局部变量不初始化，默认是随机值；
	int* p;//局部变量指针，就被初始化随机地址；
	*p = 20;//野指针，要避免这种写法；
	int arr[10] = { 0 };
	int* p = arr;//数组名，首元素地址；
	int i = 0;
	for (i = 0; i < 12; i++)//数组只有10个元素，这里访问了12个元素
	{
		*(p + i) = 1;//指针越界，也会导致野指针
	}
	return 0;
}
int *test()
{
	int a = 10;//程序进入时，a存入一个地址
	return &a;//返回a的地址
}//这段程序结束了，地址空间被释放了，还给了操作系统
int main()
{
	int* p = test();//接收了a的地址
	*p = 20;//这时候20存的地址已经是非法的，就是野指针
	return 0;
}
