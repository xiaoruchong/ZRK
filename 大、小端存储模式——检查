int check_sys()
{
	int a = 1;
	//0X 00 00 00 01 大端存储
	//0X 01 00 00 00 小端存储
	//char* p = (char*)&a;//强制类型转换，int 4个字节，强制转换，会取第一个字节
	//if (*p == 1)//解引用判断是‘0’或‘1’，可知当前存储模式
	//{
	//	return 1;
	//}
	//return 0;//原始解法
	//return *p;//简化解法
	return *(char*)&a;//最优解法
}
int main()
{
	int ret = check_sys();
	if (ret == 1)//解引用判断是‘0’或‘1’，可知当前存储模式
	{
		printf("小端存储模式");
	}
	else
		printf("大端存储模式");
	return 0;
}
//int main()
//{
//	int a = 20;
//	//00000000000000000000000000010100 ——原码
//	//00000000000000000000000000010100 ——反码
//	//00000000000000000000000000010100 ——补码
//	//00000014
//	int b = -10;
//	//10000000000000000000000000001010 ——原码
//	//11111111111111111111111111110101 ——反码
//	//11111111111111111111111111110110 ——补码
//	//fffffff6
//	1 - 1;
//	//1+（-1）
//	//00000000000000000000000000000001 ——1的原码=反码=补码
//	//10000000000000000000000000000001 ——-1的原码
//	//11111111111111111111111111111110 ——-1的反码
//	//11111111111111111111111111111111 ——-1的补码
//	//100000000000000000000000000000000 ——1+（-1）补码相加，33个bit
//	//00000000000000000000000000000000 多的一位丢掉
//	int c = 20;
//	//十六进制存储  存储位置左>>右 地址：低》》高
//	//00 00 00 14  低位存高地址，高位存低地址 大端存储模式
//	//14 00 00 00  低位存低地址，高位存高地址 小端存储模式 当前vs 小端模式
//	
//	return 0;
//}
